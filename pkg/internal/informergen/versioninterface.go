/*
Copyright 2022 The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package informergen

import (
	"io"
	"text/template"

	"github.com/kcp-dev/code-generator/pkg/parser"
)

type VersionInterface struct {
	OutputPackage                     string
	PackageName                       string
	Kinds                             []parser.Kind
	UpstreamInformerPackage           string
	UpstreamInternalInterfacesPackage string
}

func (v *VersionInterface) WriteContent(w io.Writer) error {
	templ, err := template.New("versionInterface").Funcs(templateFuncs).Parse(versionInterfaceTemplate)
	if err != nil {
		return err
	}

	m := map[string]interface{}{
		"outputPackage":                     v.OutputPackage,
		"packageName":                       v.PackageName,
		"kinds":                             v.Kinds,
		"upstreamInformerPackage":           v.UpstreamInformerPackage,
		"useUpstreamInterfaces":             v.UpstreamInformerPackage != "",
		"upstreamInternalInterfacesPackage": v.UpstreamInternalInterfacesPackage,
	}
	return templ.Execute(w, m)
}

var versionInterfaceTemplate = `
//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by kcp code-generator. DO NOT EDIT.

package {{.packageName}}

import (
	{{if not .useUpstreamInterfaces -}}
	"{{.outputPackage}}/internalinterfaces"
	{{else -}}
	internalinterfaces "{{.upstreamInternalInterfacesPackage}}"
	upstreaminformers "{{.upstreamInformerPackage}}"
	{{end -}}
)


type Interface struct {
	factory          internalinterfaces.SharedInformerFactory
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// New returns a new Interface.
func New(f internalinterfaces.SharedInformerFactory, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) Interface {
	return Interface{factory: f, namespace: namespace, tweakListOptions: tweakListOptions}
}


{{$useUpstreamInterfaces := .useUpstreamInterfaces}}
{{range .kinds}}
// {{.Plural}} returns a {{.String}}Informer.
{{if not $useUpstreamInterfaces -}}
func (v Interface) {{.Plural}}() *{{.String}}Informer {
{{end -}}
{{if $useUpstreamInterfaces -}}
func (v Interface) {{.Plural}}() upstreaminformers.{{.String}}Informer {
{{end -}}
	return &{{.String}}Informer{factory: v.factory{{if .IsNamespaced}}, namespace: v.namespace{{end}}, tweakListOptions: v.tweakListOptions}
}
{{end}}
`
